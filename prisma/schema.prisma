// generator client {
//   provider = "prisma-client-js"
//   output   = "../generated/prisma"
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AssetStatus {
  ACTIVE
  IN_MAINTENANCE
  DECOMMISSIONED
  LOST
}

enum AssetClass {
  COMPUTER
  PRINTER
  SCANNER
  LAMINATOR
  ROUTER
  SWITCH
  SERVER
  FURNITURE
  OTHER
}

// model Assets {
//   id             String      @id @default(uuid())
//   assetTag       String      @unique
//   class          AssetClass
//   status         AssetStatus @default(ACTIVE)
//   model          String
//   manufacturer   String
//   serialNumber   String      @unique
//   purchaseDate   DateTime?
//   purchasePrice  Decimal?
//   warrantyExpiry DateTime?
//   location       String?
//   assignedTo     String?
//   notes          String?

//   // Computer-specific fields
//   cpu     String?
//   ram     String?
//   storage String?
//   os      String?

//   // Network equipment fields
//   ports      Int?
//   macAddress String?
//   ipAddress  String?

//   // Printer/Scanner specific
//   consumables String?
//   resolution  String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([assetTag])
//   @@index([serialNumber])
//   @@index([class])
// }

enum Role {
  ADMIN
  MANAGER
  USER
}

model User {
  id             String         @id @default(uuid())
  fullname       String
  email          String
  password       String
  username       String         @unique
  role           Role           @default(USER)
  contact        String         @unique
  userDepartment String
  profile        String?
  isActive       Boolean        @default(false)
  token          String?        @unique
  tokenExp       DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  department     Department[]   @relation("departmentUser")
  asset          Asset[]        @relation("assetUser")
  block          Block[]        @relation("blockUser")
  report         Report[]       @relation("reportUser")
  achieve        Achieve[]      @relation("achieveUser")
  decommission   Decommission[] @relation("decommissionUser")
  disposal       Disposal[]     @relation("disposalUser")
  rooms          Rooms[]        @relation("room")
  transfer       Transfer[]     @relation("transferUser")
  systemAudit    SystemAudit []  @relation("auditUser")

  @@unique([email])
  @@index([email])
  @@index([contact])
  @@index([userDepartment])
}

model Asset {
  id          String        @id @default(uuid())
  category    String
  type        String
  subType     String?
  name        String
  model       String?
  vendor      String
  embossCode  String?
  serialNo    String?
  details     Json?
  createBy    User          @relation("assetUser", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  systemAudit SystemAudit[] @relation("auditAsset")
  allocation  Allocation[]  @relation("allocateAsset")


  @@unique([serialNo], name: "asset_serialNo_unique")
  @@unique([embossCode])
  @@index([embossCode])
  @@index([serialNo])
}

model Block {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[] @relation("deptBlock")
  createdBy   User         @relation("blockUser", fields: [createdById], references: [id])
  createdById String

  @@unique([name])
  @@index([name])
}

model Department {
  id          String       @id @default(uuid())
  name        String
  deptBlock   Block        @relation("deptBlock", fields: [blockId], references: [id])
  blockId     String
  createdBy   User         @relation("departmentUser", fields: [createdById], references: [id])
  createdById String
  assetUsers  AssetUser[]  @relation("assetDepartment")
  allocation  Allocation[] @relation("allocateDepartment")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([name])
  @@index([name])
}

model AssetUser {
  id             String       @id @default(uuid())
  name           String
  userDepartment Department   @relation("assetDepartment", fields: [userDeptId], references: [id])
  userDeptId     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  transfer       Transfer[]   @relation("transferAsset")
  allocation     Allocation[] @relation("allocateAssetUser")

  @@unique([name])
}

model Rooms {
  id          String       @id @default(uuid())
  label       String
  createdBy   User         @relation("room", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  allocation  Allocation[] @relation("allocateRooms")

  @@unique([label])
}

model Allocation {
  id             String     @id @default(uuid())
  userDepartment Department @relation("allocateDepartment", fields: [userDeptId], references: [id])
  userDeptId     String
  unit           String
  asset          Asset      @relation("allocateAsset", fields: [assetId], references: [id])
  assetId        String 
  username       AssetUser  @relation("allocateAssetUser", fields: [usernameId], references: [id])
  usernameId     String
  label          Rooms      @relation("allocateRooms", fields: [labelId], references: [id])
  labelId        String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([unit])
}

model Transfer {
  id               String    @id @default(uuid())
  userTransferTo   AssetUser @relation("transferAsset", fields: [userTransferToId], references: [id])
  userTransferToId String
  transferDate     DateTime
  createdBy   User     @relation("transferUser", fields: [createdById], references: [id])
  createdById String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model SystemAudit {
  id        String   @id @default(uuid())
  status    String
  remarks   String
  audit     Asset    @relation("auditAsset", fields: [auditId], references: [id])
  auditId   String   @unique
  createdBy   User     @relation("auditUser", fields: [createdById], references: [id])
  createdById String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Decommission {
  id          String   @id @default(uuid())
  dateOfDec   String
  reason      String
  createdBy   User     @relation("decommissionUser", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Disposal {
  id             String   @id @default(uuid())
  userTransferTo String
  transferDate   String
  createdBy      User     @relation("disposalUser", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Achieve {
  id          String   @id @default(uuid())
  createdBy   User     @relation("achieveUser", fields: [createdById], references: [id])
  createdById String
  years       DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Report {
  id          String   @id @default(uuid())
  name        String
  createdBy   User     @relation("reportUser", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
